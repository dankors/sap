//
//  Assembler.swift
//  sap
//
//  Created by Daniel Korsunsky on 5/16/16.
//  Copyright Â© 2016 Daniel Korsunsky. All rights reserved.
//

import Foundation

class Assembler {
    
    var lines = [String]()
    var tokens = [[Token]]()
    var labelDefs = [String: Int]()
    let labels: Set<String> = []
    var binary = [Int]()
    var listing = ""
    
    func splitStringByWhiteSpace(expression: String)->[String] {
        return expression.componentsSeparatedByString(" ")
    }
    
    func splitStringIntoLines(expression: String)->[String] {
        return expression.componentsSeparatedByString("/n")
    }
    
    func readFromTextFile(fileName: String) -> String {
        let result = try? String(contentsOfFile: fileName, encoding: NSUTF8StringEncoding)
        return result!
    }
    
    func readFromConsole() -> String {
        let BUFSIZE = 1024
        var buf = [CChar](count: BUFSIZE, repeatedValue: CChar(0))
        fgets(&buf, Int32(BUFSIZE), stdin)
        var line: String = String.fromCString(buf)!
        line = line.substringToIndex(line.endIndex.predecessor())
        return line
    }
    
    func tokenizeListing(file: String) {
        lines = splitStringIntoLines(readFromTextFile(file))
        let t = Tokenizer()
        for line in lines {
            tokens.append(t.getTokens(line))
        }
    }
    
}
