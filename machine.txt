//
//  VirtualMachine.swift
//  sap
//
//  Created by Yaniv Amiri on 5/12/16.
//  Copyright Â© 2016 Yaniv Amiri. All rights reserved.
//

import Foundation

protocol DebuggerHelper {
    func getMemoryAtAddress(address: Int) -> Int
    func setMemoryAtAddress(address: Int, value: Int)
    func getRegisterNumber(number: Int) -> Int
    func setRegisterNumber(number: Int, value: Int)
    func getPC() -> Int
    func setPC(value: Int)
}

class VirtualMachine : DebuggerHelper {
    var memory = [Int]()
    var registers = [Int](count: 10, repeatedValue: 0)
    var length = 0
    var programCounter = 0
    var compareRegister = 0  //difference between compared values
    var stackRegister = 0  //OK: 0, push when full: 1, pop when empty: 2
    
    struct Stack {
        var stack: [Int]
        var top: Int
        init(size: Int) {
            stack = [Int](count: size, repeatedValue: 0)
            top = 0
        }
        
        func isEmpty() -> Bool {
            if top == 0 {
                return true
            } else {
                return false
            }
        }
        
        func isFull() -> Bool {
            if top == stack.capacity {
                return true
            } else {
                return false
            }
        }
        
        mutating func push(element: Int) {
            stack[top] = element
            top += 1
        }
        
        mutating func pop() -> Int {
            let index = top - 1
            top -= 1
            return stack[index]
        }
    }
    
    var stack = Stack(size: 100) // stack code below
    
    func splitStringIntoParts(expression: String)->[String] {
        return expression.componentsSeparatedByString(" ")
    }
    
    func splitStringIntoLines(expression: String)->[String] {
        return expression.componentsSeparatedByString("\n")
    }
    
    func readFromTextFile(filePath: String)-> String? {
        var data: NSData!
        let myFileManager = NSFileManager.defaultManager()
        var result = ""
        data = myFileManager.contentsAtPath(filePath)
        if data == nil {return nil}
        let dString = NSString(data: data!, encoding: NSUTF8StringEncoding)!
        for i in 0..<dString.length {
            result.append(Character(UnicodeScalar(dString.characterAtIndex(i))))
        }
        return result
    }
    
    func readAssembledCommands(file: String) -> Bool {
        let text = readFromTextFile(file)
        if text != nil {
            let lines = splitStringIntoLines(text!)
            for line in lines {
                memory.append(Int(line)!)
            }
            length = memory.removeFirst()
            programCounter = memory.removeFirst()
            return true
        } else {
            return false
        }
    }
    
    enum Instruction: Int {
        case halt, clrr, clrx, clrm, clrb, movir, movrr, movrm, movmr, movxr, movar,
        movb, addir, addrr, addmr, addxr, subir, subrr, submr, subxr, mulir,
        mulrr, mulmr, mulxr, divir, divrr, divmr, divxr, jmp, sojz, sojnz, aojz,
        aojnz, cmpir, cmprr, cmpmr, jmpn, jmpz, jmpp, jsr, ret, push, pop,
        stackc, outci, outcr, outcx, outcb, readi, printi, readc, readln, brk,
        movrx, movxx, outs, nop, jmpne
    }
    
    
    //instruction methods
    
    func clrr(p1: Int) {
        registers[p1] = 0
        programCounter += 2
    }
    
    func clrx(p1: Int) {
        memory[registers[p1]] = 0
        programCounter += 2
    }
    
    func clrm(p1: Int) {
        memory[p1] = 0
        programCounter += 2
    }
    
    func clrb(p1: Int, p2: Int) {
        let start = registers[p1]
        let end = start + registers[p2]
        for i in start...end {
            memory[i] = 0
        }
        programCounter += 3
    }
    
    func movir(p1: Int, p2: Int) {
        registers[p2] = p1
        programCounter += 3
    }
    
    func movrr(p1: Int, p2: Int) {
        registers[p2] = registers[p1]
        programCounter += 3
    }
    
    func movrm(p1: Int, p2: Int) {
        memory[p2] = registers[p1]
        programCounter += 3
    }
    
    func movmr(p1: Int, p2: Int) {
        registers[p2] = memory[p1]
        programCounter += 3
    }
    
    func movxr(p1: Int, p2: Int) {
        registers[p2] = memory[registers[p1]]
        programCounter += 3
    }
    
    func movar(p1: Int, p2: Int) {
        registers[p2] = p1
        programCounter += 3
    }
    
    func movb(p1: Int, p2: Int, p3: Int) {
        let count = registers[p3]
        for i in 0..<count {
            memory[registers[p2] + i] = memory[registers[p1] + i]
        }
        programCounter += 4
    }
    
    func addir(p1: Int, p2: Int) {
        registers[p2] += p1
        programCounter += 3
    }
    
    func addrr(p1: Int, p2: Int) {
        registers[p2] += registers[p1]
        programCounter += 3
    }
    
    func addmr(p1: Int, p2: Int) {
        registers[p2] += memory[p1]
        programCounter += 3
    }
    
    func addxr(p1: Int, p2: Int) {
        registers[p2] += memory[registers[p1]]
        programCounter += 3
    }
    
    func subir(p1: Int, p2: Int) {
        registers[p2] -= p1
        programCounter += 3
    }
    
    func subrr(p1: Int, p2: Int) {
        registers[p2] -= registers[p1]
        programCounter += 3
    }
    
    func submr(p1: Int, p2: Int) {
        registers[p2] -= memory[p1]
        programCounter += 3
    }
    
    func subxr(p1: Int, p2: Int) {
        registers[p2] -= memory[registers[p1]]
        programCounter += 3
    }
    
    func mulir(p1: Int, p2: Int) {
        registers[p2] *= p1
        programCounter += 3
    }
    
    func mulrr(p1: Int, p2: Int) {
        registers[p2] *= registers[p1]
        programCounter += 3
    }
    
    func mulmr(p1: Int, p2: Int) {
        registers[p2] *= memory[p1]
        programCounter += 3
    }
    
    func mulxr(p1: Int, p2: Int) {
        registers[p2] *= memory[registers[p1]]
        programCounter += 3
    }
    
    func divir(p1: Int, p2: Int) {
        registers[p2] /= p1
        programCounter += 3
    }
    
    func divrr(p1: Int, p2: Int) {
        registers[p2] /= registers[p1]
        programCounter += 3
    }
    
    func divmr(p1: Int, p2: Int) {
        registers[p2] /= memory[p1]
        programCounter += 3
    }
    
    func divxr(p1: Int, p2: Int) {
        registers[p2] /= memory[registers[p1]]
        programCounter += 3
    }
    
    func jmp(p1: Int) {
        programCounter = p1
    }
    
    func sojz(p1: Int, p2: Int) {
        registers[p1] -= 1
        if registers[p1] == 0 {
            programCounter = p2
        } else {
            programCounter += 3
        }
    }
    
    func sojnz(p1: Int, p2: Int) {
        registers[p1] -= 1
        if registers[p1] != 0 {
            programCounter = p2
        } else {
            programCounter += 3
        }
    }
    
    func aojz(p1: Int, p2: Int) {
        registers[p1] += 1
        if registers[p1] == 0 {
            programCounter = p2
        } else {
            programCounter += 3
        }
    }
    
    func aojnz(p1: Int, p2: Int) {
        registers[p1] += 1
        if registers[p1] != 0 {
            programCounter = p2
        } else {
            programCounter += 3
        }
    }
    
    func cmpir(p1: Int, p2: Int) {
        compareRegister = p1 - registers[p2]
        programCounter += 3
    }
    
    func cmprr(p1: Int, p2: Int) {
        compareRegister = registers[p1] - registers[p2]
        programCounter += 3
    }
    
    func cmpmr(p1: Int, p2: Int) {
        compareRegister = memory[p1] - registers[p2]
        programCounter += 3
    }
    
    func jmpn(p1: Int) {
        if compareRegister < 0 {
            programCounter = p1
        } else {
            programCounter += 2
        }
    }
    
    func jmpz(p1: Int) {
        if compareRegister == 0 {
            programCounter = p1
        } else {
            programCounter += 2
        }
    }
    
    func jmpp(p1: Int) {
        if compareRegister > 0 {
            programCounter = p1
        } else {
            programCounter += 2
        }
    }
    
    func jsr(p1: Int) {
        for r in 5...9 {
            stack.push(registers[r])
            if stack.isFull() {
                stackRegister = 1
            } else {
                stackRegister = 0
            }
        }
        stack.push(programCounter + 2)
        programCounter = p1
    }
    
    func ret() {
        programCounter = stack.pop()
        for r in 9.stride(through: 5, by: -1) {
            registers[r] = stack.pop()
            if stack.isEmpty() {
                stackRegister = 2
            } else {
                stackRegister = 0
            }
        }
    }
    
    func push(p1: Int) {
        stack.push(registers[p1])
        if stack.isFull() {
            stackRegister = 1
        } else {
            stackRegister = 0
        }
        programCounter += 2
    }
    
    func pop(p1: Int) {
        registers[p1] = stack.pop()
        if stack.isEmpty() {
            stackRegister = 2
        } else {
            stackRegister = 0
        }
        programCounter += 2
    }
    
    func stackc(p1: Int) {
        registers[p1] = stackRegister
        programCounter += 2
    }
    
    func outci(p1: Int) {
        print(Character(UnicodeScalar(p1)), terminator: "")
        programCounter += 2
    }
    
    func outcr(p1: Int) {
        print(Character(UnicodeScalar(registers[p1])), terminator: "")
        programCounter += 2
    }
    
    func outcx(p1: Int) {
        print(Character(UnicodeScalar(memory[registers[p1]])), terminator: "")
        programCounter += 2
    }
    
    func outcb(p1: Int, p2: Int) {
        let count = registers[p2]
        for i in 0..<count {
            print(Character(UnicodeScalar(memory[registers[p1] + i])), terminator: "")
        }
        programCounter += 3
    }
    
    func readFromConsole() -> String {
        let BUFSIZE = 1024
        var buf = [CChar](count: BUFSIZE, repeatedValue: CChar(0))
        fgets(&buf, Int32(BUFSIZE), stdin)
        var line: String = String.fromCString(buf)!
        line = line.substringToIndex(line.endIndex.predecessor())
        return line
    }
    
    func readi(p1: Int, p2: Int) {
        let i = readFromConsole()
        registers[p1] = Int(i)!
        programCounter += 2
    }
    
    func printi(p1: Int) {
        print("\(registers[p1])", terminator:"")
        programCounter += 2
    }
    
    func readc(p1: Int) {
        let char = readFromConsole()
        registers[p1] = Int(char.utf8.first!)
        programCounter += 2
    }
    
    func readln(p1: Int, p2: Int) {
        let line = readFromConsole()
        let chars = line.characters.map{String($0)}
        let count = registers[p2]
        for c in 0..<count {
            memory[p1 + c] = Int(chars[c].utf8.first!)
        }
        programCounter += 3
    }
    
    func brk() {
        programCounter += 1
    }
    
    func movrx(p1: Int, p2: Int) {
        memory[registers[p2]] = registers[p1]
        programCounter += 3
    }
    
    func movxx(p1: Int, p2: Int) {
        memory[registers[p2]] = memory[registers[p1]]
        programCounter += 3
    }
    
    func outs(p1: Int) {
        var string = ""
        for i in 1...memory[p1] {
            string += String(UnicodeScalar(memory[p1 + i]))
        }
        print(string, terminator:"")
        programCounter += 2
    }
    
    func nop() {
        programCounter += 1
    }
    
    func jmpne(p1: Int) {
        if compareRegister != 0 {
            programCounter = p1
        } else {
            programCounter += 2
        }
    }
    
    func getMemoryAtAddress(address: Int) -> Int {
        if address >= 0 || address < (memory.count - 1) {
            return memory[address]
        }
        else {
            return -1
        }
    }
    
    func setMemoryAtAddress(address: Int, value: Int) {
        if memory.count > address {
            memory[address] = value
        }
        else {
            memory.append(value)
        }
    }
    
    func getRegisterNumber(number: Int) -> Int {
        if(number >= 9 || number < -1) {
            return -1
        }
        else {
            return registers[number]
        }
    }
    
    func setRegisterNumber(number: Int, value: Int) {
        if(number <= 9 || number >= 0) {
            registers[number] = value
        }
    }
    func getPC() -> Int {
        return programCounter
    }
    func setPC(value: Int) {
        programCounter = value
    }
    
    
    func runVirtualMachine(filePath: String) {
        if readAssembledCommands(filePath) {
            let db = Debugger(helperH: self, count: memory.count, fileIn: filePath)
            db.runDebugger()
            var code = memory[programCounter]
            while code != 0 {
                db.currentMem = programCounter
                if db.breaks[programCounter] == false {
                switch Instruction(rawValue: code)! {
                case .clrr:
                    let param1 = memory[programCounter + 1]
                    clrr(param1)
                case .clrx:
                    let param1 = memory[programCounter + 1]
                    clrx(param1)
                case .clrm:
                    let param1 = memory[programCounter + 1]
                    clrm(param1)
                case .clrb:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    clrb(param1, p2: param2)
                case .movir:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    movir(param1, p2: param2)
                case .movrr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    movrr(param1, p2: param2)
                case .movrm:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    movrm(param1, p2: param2)
                case .movmr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    movmr(param1, p2: param2)
                case .movxr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    movxr(param1, p2: param2)
                case .movar:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    movar(param1, p2: param2)
                case .movb:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    let param3 = memory[programCounter + 3]
                    movb(param1, p2: param2, p3: param3)
                case .addir:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    addir(param1, p2: param2)
                case .addrr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    addrr(param1, p2: param2)
                case .addmr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    addmr(param1, p2: param2)
                case .addxr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    addxr(param1, p2: param2)
                case .subir:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    subir(param1, p2: param2)
                case .subrr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    subrr(param1, p2: param2)
                case .submr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    submr(param1, p2: param2)
                case .subxr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    subxr(param1, p2: param2)
                case .mulir:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    mulir(param1, p2: param2)
                case .mulrr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    mulrr(param1, p2: param2)
                case .mulmr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    mulmr(param1, p2: param2)
                case .mulxr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    mulxr(param1, p2: param2)
                case .divir:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    divir(param1, p2: param2)
                case .divrr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    divrr(param1, p2: param2)
                case .divmr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    divmr(param1, p2: param2)
                case .divxr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    divxr(param1, p2: param2)
                case .jmp:
                    let param1 = memory[programCounter + 1]
                    jmp(param1)
                case .sojz:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    sojz(param1, p2: param2)
                case .sojnz:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    sojnz(param1, p2: param2)
                case .aojz:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    aojz(param1, p2: param2)
                case .aojnz:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    aojnz(param1, p2: param2)
                case .cmpir:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    cmpir(param1, p2: param2)
                case .cmprr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    cmprr(param1, p2: param2)
                case .cmpmr:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    cmpmr(param1, p2: param2)
                case .jmpn:
                    let param1 = memory[programCounter + 1]
                    jmpn(param1)
                case .jmpz:
                    let param1 = memory[programCounter + 1]
                    jmpz(param1)
                case .jmpp:
                    let param1 = memory[programCounter + 1]
                    jmpp(param1)
                case .jsr:
                    let param1 = memory[programCounter + 1]
                    jsr(param1)
                case .ret:
                    ret()
                case .push:
                    let param1 = memory[programCounter + 1]
                    push(param1)
                case .pop:
                    let param1 = memory[programCounter + 1]
                    pop(param1)
                case .stackc:
                    let param1 = memory[programCounter + 1]
                    stackc(param1)
                case .outci:
                    let param1 = memory[programCounter + 1]
                    outci(param1)
                case .outcr:
                    let param1 = memory[programCounter + 1]
                    outcr(param1)
                case .outcx:
                    let param1 = memory[programCounter + 1]
                    outcx(param1)
                case .outcb:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    outcb(param1, p2: param2)
                case .readi:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    readi(param1, p2: param2)
                case .printi:
                    let param1 = memory[programCounter + 1]
                    printi(param1)
                case .readc:
                    let param1 = memory[programCounter + 1]
                    readc(param1)
                case .readln:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    readln(param1, p2: param2)
                case .brk:
                    brk()
                case .movrx:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    movrx(param1, p2: param2)
                case .movxx:
                    let param1 = memory[programCounter + 1]
                    let param2 = memory[programCounter + 2]
                    movxx(param1, p2: param2)
                case .outs:
                    let param1 = memory[programCounter + 1]
                    outs(param1)
                case .nop:
                    nop()
                case .jmpne:
                    let param1 = memory[programCounter + 1]
                    jmpne(param1)
                default:
                    print("Error: not a valid instruction")
                }
                code = memory[programCounter]
                } else {
                    db.runDebugger()
                }
            }
        } else {
            print("Error: file does not exist")
        }
    }
    
    
}
