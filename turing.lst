.start Setup
State: .Integer #0
Head: .Integer #0
Tape: .String "_101010_"
InputChar: .Integer #0
NewState: .Integer #0
OutputChar: .Integer #0
HeadShift: .Integer #0
TupMatch: .Integer #0	  ;holds # of correct tuple
NumTuples: .Integer #5
Tuples: .tuple \ 0 _ 0 _ r \
	   .tuple \ 0 0 1 1 r \
	   .tuple \ 0 1 1 0 r \
	   .tuple \ 1 1 1 0 r \
	   .tuple \ 1 0 1 1 r \
NewLine: .Integer #10
TupMess: .String "Tuples:"
StateMess: .String "Initial State: "
HeadMess: .String "Initial Head Position: "
TapeMess: .String "Initial Tape: "
EndMess: .String "Final Tape: "

;purposes of each register (mostly)
;0: holds newLine ASCII
;1: tuple number
;2: holds current tuple?
;3: holds address of first tuple
;4: ?
;5: ?
;6: holds current state
;7: holds head position
;8: ?
;9: ?

Setup: movmr State r6
	movmr Head r7
	movmr NewLine r0
	movir #0 r1
	movar Tuples r3
	jmp PrintTuples
	
PrintDir: sojz r9 PrintR
	jmp PrintL
	
PrintR: outci #114
	outcr r0
	movar Tuples r3
	ret
	
PrintL: outci #108
	outcr r0
	movar Tuples r3
	ret
	
PrintTuple: movrr r1 r9
	mulir #5 r9
	addrr r9 r3
	movxr r3 r9
	printi r9
	outci #32
	addir #1 r3
	movxr r3 r9
	outcr r9
	outci #32
	addir #1 r3
	movxr r3 r9
	printi r9
	outci #32
	addir #1 r3
	movxr r3 r9
	outcr r9
	outci #32
	addir #1 r3
	movxr r3 r9
	jmp PrintDir

ToPrint: jsr PrintTuple

PrintTuples: addir #1 r1
	cmpmr NumTuples r1
	jmpne ToPrint

BeginMess: outs StateMess
	printi r6
	outcr r0
	outs HeadMess
	printi r7
	outcr r0
	outs TapeMess
	outs Tape
	outcr r0
	outcr r0

Run: jsr GetInput
	jsr 
	jsr PrintTape
	addir #2 r4
	movxr r4 r6
	addir #1 r4
	movxx r4 r7
	addir #1 r4
	movxr r4 r4
	addrr r4 r7
	addir #1 r2
	jmp Run

GetInput: movmr Head r7
	movar Tape r8
	addir #1 r8
	addrr r7 r8
	movxr r7 r9
	movrm r9 InputChar
	ret
	
FindTuple: movar Tuples r5
	movar Tuples r6
	movir #5 r7
	mulmr NumTuples r7
	addrr r7 r6



	cmprr r8 r9
	jmpne End
	movrr r8 r4
	movxr r8 r5
	cmprr r6 r5
	addir #4 r8
	jmpne FindTuple
	addir #1 r8
	movxr r8 r5
	movxr r7 r3
	cmprr r3 r5
	addir #3 r8
	jmpne FindTuple
	ret

PrintTape: movmr Tuples r9
	subrr r5 r7
	subrr r7 r9
	subir #1 r9
	outcb r5 r7
	addrr r5 r7
	outci #91   ;ASCII for left bracket
	outcx r7
     outci #93   ;ASCII for right bracket
	outcb r7 r9
	movrr r4 r1
	outs S
	outcx r1
	addir #1 r1
	outs I
	outcx r1
	addir #1 r1
	outs NS
	outcx r1
	addir #1 r1
	outs O
	outcx r1
	addir #1 r1
	outs D
	outcx r1
	addir #1 r1
	outcr r0
	ret

End: outs EndMess
	outs InitialTape
	outs StepsMess1
	printi r2
	outs StepsMess2
	halt
